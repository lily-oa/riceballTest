{"version":3,"sources":["all.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA","file":"all.js","sourcesContent":["// Swal.fire({\n//   icon:'info',\n//   title: '請填寫文字內容',\n//   input: 'text',\n// }).then(result => {\n//   console.log(result.value);\n//   Swal.fire({\n//     icon:'success',\n//     title:'新增內容成功',\n//     text: result.value\n//   })\n// })\n\n\n//----------------------------------------------------------test\n// const timeout = setTimeout(callFun, 1500);\n\n// function callFun(){\n//   console.log('觸發');\n// }\n\n// const timeout2 = setTimeout(()=> console.log('qq'), 2000);\n\n// const timeout3 = setTimeout(() => console.log('你好'), 3000);\n\n// const timeout4 = setTimeout(() => console.log('end'), 4000); \n\n//---------------------------------------------------------------test2\n// const checkScore = new Promise((resolve, reject) => {\n//   console.log('正在批改中')\n//   setTimeout(()=>{\n//    const score = Math.round(Math.random()*100);\n//    if(score >= 60){\n//     resolve(score);\n//    }else{\n//     reject('不及格');\n//    }\n//   }, 2000);\n  \n  \n// });\n\n// checkScore\n//   .then(data => console.log(data))  \n//   .catch(error => console.log(error))\n\n\n\n// const checkStuName = new Promise((resolve, reject) =>{\n//   console.log('正在確認名單');\n//   setTimeout(() => {\n//     const stuScore = Math.round(Math.random()*100);\n//     if(stuScore >= 60){\n//       resolve(stuScore);\n//     }else{\n//       reject(`${stuScore}這是要刪除的名單號`);\n//     }\n//   }, 5000);\n// });\n\n// checkStuName\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//------------------------------------------------------test3\n// const checkScore = (score) =>{\n//   return new Promise((resolve, reject) => {\n//     console.log('正在觀察是否及格')\n//     setTimeout(()=>{\n\n//     if(score >= 60){\n//       resolve(score);\n//     }else{\n//       reject('不及格');\n//     }\n//     }, 2000);\n//   });\n// }\n\n// checkScore(60)\n//   .then(data => console.log(data))  \n//   .catch(error => console.log(error))\n\n//-------------------------------------------------------test4\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//       if (score >= 20) {\n//         resolve({\n//           name,\n//           score\n//         })\n//       }else{\n//         reject(`退學，分數是${score}`)\n//       }\n//     }, 1000);\n//   });\n// }\n\n// function checkReward(data){\n//   return new Promise((resolve, reject) => {\n//     console.log('正在檢查獎品中');\n//     setTimeout(()=>{\n//       if(data.score>=90){\n//         resolve(`${data.name}獲得電影票`)\n//       }else if(data.score>=60 && data.score<90){\n//         resolve(`${data.name}獲得嘉獎`)\n//       }else{\n//         reject(`你沒有獎品，打手心10下!分數是${data.score}`)\n//       }\n//     }, 1000)\n//   })\n// }\n\n// correctTest(\"小明\")\n//   .then(data => {\n//     return checkReward(data);\n//   })\n//   .then(reward => console.log(reward))\n//.then( data => console.log(`分數是${data.score}, 名字是${data.name}`))\n//   .catch(error => console.log(error))\n\n//-------------------------------------------------------------------------------test5\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//       if (score >= 20) {\n//         resolve({\n//           name,\n//           score\n//         })\n//       }else{\n//         reject(`退學，分數是${score}`)\n//       }\n//     }, 1000);\n//   });\n// }\n\n// function checkReward(data){\n//   return new Promise((resolve, reject) => {\n//     console.log('正在檢查獎品中');\n//     setTimeout(()=>{\n//       if(data.score>=90){\n//         resolve(`${data.name}獲得電影票`)\n//       }else if(data.score>=60 && data.score<90){\n//         resolve(`${data.name}獲得嘉獎`)\n//       }else{\n//         reject(`你沒有獎品，打手心10下!分數是${data.score}`)\n//       }\n//     }, 1000)\n//   })\n// }\n\n// async、await  非同步語法\n// const init = async function () {\n//   try {\n//     const studentA = await correctTest('小明');\n// 過一秒後才執行下段語法\n//     const rewardA = await checkReward(studentA);\n//     console.log(rewardA);\n\n//   } catch (error) {\n//     console.log(error)\n//   }\n// }\n// init();\n\n\n//--------------------------------------------------------test6\n// Promise.all\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//         resolve({\n//           name,\n//           score\n//         })\n//     }, Math.random() * 1000);\n//   });\n// }\n// Promise.all([correctTest('小明'),correctTest('小花'),correctTest('小小')])\n//   .then(data => console.log(data));\n\n\n//-------------------------------------------------------------test7\n// Fetch\n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n\n// fetch(url)\n//   .then(response => response.json())\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error))\n\n//------------------------------------------------------------test8\n// XMLHttpRequest\n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n\n\n\n// 非同步的寫法\n// function getUrl(url) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open('GET', url);\n//     xhr.onload = () => resolve(xhr.responseText);\n//     xhr.onerror = () => reject(xhr.statusText);\n//     xhr.send();\n//   })\n// }\n\n// getUrl(url)\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//---------------------------------------------------------------test9\n// axios \n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n// const axios = {\n//   get: function(url) {\n//     return new Promise((resolve, reject) => {\n//       const xhr = new XMLHttpRequest();\n//       xhr.open('GET', url);\n//       xhr.onload = () => resolve(xhr.responseText);\n//       xhr.onerror = () => reject(xhr.statusText);\n//       xhr.send();\n//     })\n//   }\n// }\n\n// axios.get(url)\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//----------------------------------------------------------------test10\n//sweetalert2  彈跳視窗，此套件的載入方式是在 layout.ejs 使用它的 cdn\n\n// Swal.fire({\n//   title: 'Are you sure?',\n//   text: \"You won't be able to revert this!\",\n//   icon: 'warning',\n//   showCancelButton: true,\n//   confirmButtonColor: '#3085d6',\n//   cancelButtonColor: '#d33',\n//   confirmButtonText: 'Yes, delete it!'\n// }).then((result) => {\n//   console.log(result);\n//   if (result.isConfirmed) {\n//     Swal.fire(\n//       {\n//         title: '新增成功',\n//         icon: 'success',\n//       }\n//     )\n//   }\n// })\n\n//------------------------------------------------------------------test11\n// sweetalert2 input Types\n// Swal.fire({\n//   icon: 'info',\n//   title: '請填寫文字內容',\n//   input: 'text'\n// }).then(result =>{\n//   console.log(result.value);\n//   Swal.fire({\n//     icon:'success', \n//     title:'新增內容成功',\n//     text: result.value,\n//   })\n// })\n  \n//-------------------------------------------------------------------test12\n// (async() =>{\n// const ipAPI = '//api.ipify.org?format=json';\n\n// const inputValue = fetch(ipAPI)\n//   .then(response => response.json())\n//   .then(data => data.ip)\n\n// const { value: ipAddress } = await Swal.fire({\n//   title: 'Enter your IP address',\n//   input: 'text',\n//   inputLabel: 'Your IP address',\n//   inputValue: inputValue,\n//   showCancelButton: true,\n//   inputValidator: (value) => {\n//     if (!value) {\n//       return 'You need to write something!'\n//     }\n//   }\n// })\n\n// if (ipAddress) {\n//   Swal.fire(`Your IP address is ${ipAddress}`)\n// }\n// })()\n\n//----------------------------------------------------------------------todolist\n//註冊\n//const apiUrl = 'https://todoo.5xcamp.us/'\n//Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyNjA0Iiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNjczMTcxOTg1LCJleHAiOjE2NzQ0Njc5ODUsImp0aSI6IjU5YmQ0YTNmLTJhMzAtNGI3Zi05OGNhLTUyMTUwMDlhZWRiMSJ9.nWVfaZ50n4YemMnM6xJ4_Q9KYLvuZHsI7vI2flnZHeQ\n//let token = '';\n// function signUp(email, nickname, pwd) {\n//   axios.post(`${apiUrl}/users`, {\n//     \"user\": {\n//       \"email\": email,\n//       \"nickname\": nickname,\n//       \"password\": pwd\n//     }\n//   })\n//   .then(res => console.log(res))\n//   .catch(error => console.log(error.response))\n// }\n\n//登入\n// function login(email, pwd) {\n//   axios.post(`${apiUrl}/users/sign_in`, {\n//     \"user\": {\n//       \"email\": email,\n//       \"password\":pwd\n//     }\n//   })\n  // 此行是在每次登錄時將 token 帶到 axios上\n  // 事先在 headers 的欄位 [Authorization] 將 token抓過來\n//     .then(res => axios.defaults.headers.common['Authorization'] = res.headers.authorization\n//     )\n//     .catch(error => console.log(error))\n// }\n\n//驗證金鑰 \n// function getTodo(){\n//   axios.get(`${apiUrl}/todos`)\n//   .then(res => console.log(res))\n//   .catch(err => console.log(err))\n// }\n\n\n//新增代辦事項\n// function addTodo(todo){\n//   axios.post(`${apiUrl}/todos`, {\n//     \"todo\": {\n//       \"content\": todo\n//     }\n//   })\n//   .then(res => console.log(res))\n//   .catch(err => console.log(err))\n// }\n\n//編輯todo(單筆修改)\n// function updateTodo(todo, todoId){\n//   axios.put(`${apiUrl}/todos/${todoId}`, {\n//     \"todo\": {\n//       \"content\": todo\n//     }\n//   })\n//   .then(res => console.log(res))\n//   .catch(err => console.log(err))\n// }\n\n//刪除 todos\n// function deleteTodo(todoId){\n//   axios.delete(`${apiUrl}/todos/${todoId}`)\n//   .then(res => console.log(res))\n//   .catch(err => console.log(err))\n// }\n\n//更新 todos 未完成及已完成(可以一直切換)\n// function toggleTodo(todoId){\n//   axios.patch(`${apiUrl}/todos/${todoId}/toggle`,{})\n//   .then(res => console.log(res))\n//   .catch(err => console.log(err.response))\n// }\n\n//-------------------------------------------------------------------------------------------------測試是否有支援垮網域\n// function getAPI(){\n//   axios.get('https://citypark.tainan.gov.tw/App/parking.ashx?verCode=5177E3481D&type=1&ftype=1&exportTo=2')\n//   .then(res => console.log(res));\n// }\n\n//------------------------------------------------------------複習 0221\n\n// setTimeout 計時器\n// const timeout = setTimeout(callback function, 2000)\n\n// const timeout = setTimeout(callFun, 3000);\n\n// function callFun(){\n//   console.log('觸發');\n// }\n\n// const timeout2 = setTimeout(()=>console.log('再次觸發'), 5000);\n\n//------------------------------------------------------------promise\n//檢查分數\n//註冊一個 promise\n// const checkScore = new Promise((resolve, reject) => {\n//   console.log('正在批改中');\n//   setTimeout(() => {\n//產生一組2位數 0-99 分的隨機分數\n//     const score = Math.round(Math.random() * 100);\n//     if (score >= 60) {\n//       resolve(score);\n//     } else {\n//       reject('不及格');\n//     }\n//   }, 2000);\n// })\n\n// checkScore\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error))\n\n  // 註冊一份作業成績 \n  // const hscore = new Promise((resolve, reject) => {\n  //   console.log('老師批改作業中');\n  //   setTimeout(() => {\n  //     const score = Math.round(Math.random() * 100);\n  //     if (score >= 80) {\n  //       resolve(score);\n  //     } else {\n  //       reject('作業重寫');\n  //     }\n  //   }, 3000);\n  // })\n\n  // hscore\n  //   .then(hdata => console.log(hdata))\n  //   .catch(herror => console.log(herror));\n\n  //promise 帶參數\n//   const checkScore = (score)=>{\n//   return new Promise((resolve, reject) => {\n//     console.log('正在觀察是否及格');\n//     setTimeout(() => {\n//       if (score >= 60) {\n//         resolve(score);\n//       } else {\n//         reject('不及格');\n//       }\n//     }, 2000);\n//   })\n// }\n\n//   checkScore(80)\n//     .then(data => console.log(data))\n//     .catch(error => console.log(error))\n\n//-------------------------------------設計兩個 promise 串接\n//第一個 promise 計算成績\n//第二個 promise 審核成績\n// function correctTest(name){\n//   return new Promise((resolve, reject) =>{\n//     console.log('批改作業中');\n//     setTimeout(()=>{\n//       const score = Math.round(Math.random()*100);\n//       if(score >= 20){\n//         resolve(\n//           {\n//             name, \n//             score\n//           }\n//         )\n//       }else{\n//         reject(\"您已達退學的門檻\");\n//       }\n      \n      \n//     }, 2000);\n//   })\n// }\n\n// function checkReward(data){\n//   return new Promise((resolve, reject) => {\n//     console.log('檢查獎品中');\n//     setTimeout(()=>{\n//       if(data.score >= 90){\n//         resolve(`${data.name}獲得電影票`)\n//       }else if(data.score>=60 && data.score<90){\n//         resolve(`${data.name}獲得嘉獎`)\n//       }else{\n//         console.log(data.score);\n//         reject(`你沒有獎品打手心10下`)\n//       }\n//     }, 1000)\n//   })\n// }\n\n// correctTest('小明')\n//   .then(data => checkReward(data))\n//   .then( reward => console.log(reward))\n//   .catch(error => console.log(error));\n\n// 想改寫成下方那樣\n// const studentA = correctTest('小明');\n// const reward = checkReward(studnetA);\n\n// 改寫成下方非同步語法\n//async、 await\n//async 是非同步的語法\n//await 是 then(){retrun}的意思，跑 promise\n//init 初始化函式\n// const init = async function(){\n//   try{\n//     const studentA = await correctTest('小明');\n// 過一秒後才執行下段語法\n// 這邊要暫停一下等它回傳我才執行下面的code\n//     const rewardA = await checkReward(studentA);\n//     console.log(rewardA);\n//   }catch(error){\n//     console.log(error)\n//   }\n// }\n//執行函式\n// init();\n\n//----------------------------------------我做的範例\n// 可不可以進去夜店\n// function wantToGo(yourName){\n//   return new Promise((resolve, reject) => {\n//     console.log('你有多少錢？');\n//     setTimeout(()=>{\n//       const money = Math.round(Math.random()*1000);\n//       if(money >= 200){    \n//         resolve(\n//           {\n//             yourName,\n//             money\n//           }\n//         )\n//       }else{  \n//         reject('錢不夠，滾出去!!')\n//       }\n//     }, 2000);\n//   });\n// }\n\n// function canI(number){\n//   return new Promise((resolve, reject)=>{\n//     console.log('夠嗎？可以讓開了嗎!!!')\n//     setTimeout(() => {\n//       if(number.money >= 800){\n//         resolve(`${number.yourName}你可以直接升級成我們的永久會員喔~`)\n//       }else if(number.money >= 600 && number.money<800){\n//         resolve(`${number.yourName}，你只要再加50萬就可以成為白金會員喔~每次來都能打8折`)\n//       }else{\n//         console.log(number.money);\n//         reject(`很抱歉~你不能進去~你可以回去拿錢再來`)\n//       }\n//     }, 2000)\n//   });\n// }\n\n// 原本的寫法\n// wantToGo('親愛的~')\n//   .then(number => canI(number))\n//   .then(go => console.log(go))\n//   .catch(error => console.log(error))\n\n\n// 改寫成非同步的寫法\n// async await \n// const init = async function(){\n//   try{\n//     const who = await wantToGo('親愛的~');\n//     const decide = await canI(who);\n//     console.log(decide);\n//   }catch(error){\n//     console.log(error);\n//   }\n// }\n\n// init();\n\n"]}