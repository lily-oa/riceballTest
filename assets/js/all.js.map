{"version":3,"sources":["all.js"],"names":["signUp","email","nickname","password","axios","post","then","res","console","log","error"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAC;EACxCC,KAAK,CAACC,IAAI,CAAC,+BAA+B,EAAC;IACzC,MAAM,EAAE;MACN,OAAO,EAAEJ,KAAK;MACd,UAAU,EAAEC,QAAQ;MACpB,UAAU,EAAEC;IACd;EACF,CAAC,CAAC,CACCG,IAAI,CAAC,UAAAC,GAAG;IAAA,OAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAAA,EAAC,SACxB,CAAC,UAAAG,KAAK;IAAA,OAAIF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;EAAA,EAAC;AACvC","file":"all.js","sourcesContent":["// Swal.fire({\n//   icon:'info',\n//   title: '請填寫文字內容',\n//   input: 'text',\n// }).then(result => {\n//   console.log(result.value);\n//   Swal.fire({\n//     icon:'success',\n//     title:'新增內容成功',\n//     text: result.value\n//   })\n// })\n\n\n//----------------------------------------------------------test\n// const timeout = setTimeout(callFun, 1500);\n\n// function callFun(){\n//   console.log('觸發');\n// }\n\n// const timeout2 = setTimeout(()=> console.log('qq'), 2000);\n\n// const timeout3 = setTimeout(() => console.log('你好'), 3000);\n\n// const timeout4 = setTimeout(() => console.log('end'), 4000); \n\n//---------------------------------------------------------------test2\n// const checkScore = new Promise((resolve, reject) => {\n//   console.log('正在批改中')\n//   setTimeout(()=>{\n//    const score = Math.round(Math.random()*100);\n//    if(score >= 60){\n//     resolve(score);\n//    }else{\n//     reject('不及格');\n//    }\n//   }, 2000);\n  \n  \n// });\n\n// checkScore\n//   .then(data => console.log(data))  \n//   .catch(error => console.log(error))\n\n\n\n// const checkStuName = new Promise((resolve, reject) =>{\n//   console.log('正在確認名單');\n//   setTimeout(() => {\n//     const stuScore = Math.round(Math.random()*100);\n//     if(stuScore >= 60){\n//       resolve(stuScore);\n//     }else{\n//       reject(`${stuScore}這是要刪除的名單號`);\n//     }\n//   }, 5000);\n// });\n\n// checkStuName\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//------------------------------------------------------test3\n// const checkScore = (score) =>{\n//   return new Promise((resolve, reject) => {\n//     console.log('正在觀察是否及格')\n//     setTimeout(()=>{\n\n//     if(score >= 60){\n//       resolve(score);\n//     }else{\n//       reject('不及格');\n//     }\n//     }, 2000);\n//   });\n// }\n\n// checkScore(60)\n//   .then(data => console.log(data))  \n//   .catch(error => console.log(error))\n\n//-------------------------------------------------------test4\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//       if (score >= 20) {\n//         resolve({\n//           name,\n//           score\n//         })\n//       }else{\n//         reject(`退學，分數是${score}`)\n//       }\n//     }, 1000);\n//   });\n// }\n\n// function checkReward(data){\n//   return new Promise((resolve, reject) => {\n//     console.log('正在檢查獎品中');\n//     setTimeout(()=>{\n//       if(data.score>=90){\n//         resolve(`${data.name}獲得電影票`)\n//       }else if(data.score>=60 && data.score<90){\n//         resolve(`${data.name}獲得嘉獎`)\n//       }else{\n//         reject(`你沒有獎品，打手心10下!分數是${data.score}`)\n//       }\n//     }, 1000)\n//   })\n// }\n\n// correctTest(\"小明\")\n//   .then(data => {\n//     return checkReward(data);\n//   })\n//   .then(reward => console.log(reward))\n//.then( data => console.log(`分數是${data.score}, 名字是${data.name}`))\n//   .catch(error => console.log(error))\n\n//-------------------------------------------------------------------------------test5\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//       if (score >= 20) {\n//         resolve({\n//           name,\n//           score\n//         })\n//       }else{\n//         reject(`退學，分數是${score}`)\n//       }\n//     }, 1000);\n//   });\n// }\n\n// function checkReward(data){\n//   return new Promise((resolve, reject) => {\n//     console.log('正在檢查獎品中');\n//     setTimeout(()=>{\n//       if(data.score>=90){\n//         resolve(`${data.name}獲得電影票`)\n//       }else if(data.score>=60 && data.score<90){\n//         resolve(`${data.name}獲得嘉獎`)\n//       }else{\n//         reject(`你沒有獎品，打手心10下!分數是${data.score}`)\n//       }\n//     }, 1000)\n//   })\n// }\n\n// async、await  非同步語法\n// const init = async function () {\n//   try {\n//     const studentA = await correctTest('小明');\n// 過一秒後才執行下段語法\n//     const rewardA = await checkReward(studentA);\n//     console.log(rewardA);\n\n//   } catch (error) {\n//     console.log(error)\n//   }\n// }\n// init();\n\n\n//--------------------------------------------------------test6\n// Promise.all\n// function correctTest(name) {\n//   return new Promise((resolve, reject) => {\n//     console.log('正在批改作業中');\n//     setTimeout(() => {\n//       const score = Math.round(Math.random() * 100);\n//         resolve({\n//           name,\n//           score\n//         })\n//     }, Math.random() * 1000);\n//   });\n// }\n// Promise.all([correctTest('小明'),correctTest('小花'),correctTest('小小')])\n//   .then(data => console.log(data));\n\n\n//-------------------------------------------------------------test7\n// Fetch\n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n\n// fetch(url)\n//   .then(response => response.json())\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error))\n\n//------------------------------------------------------------test8\n// XMLHttpRequest\n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n\n\n\n// 非同步的寫法\n// function getUrl(url) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open('GET', url);\n//     xhr.onload = () => resolve(xhr.responseText);\n//     xhr.onerror = () => reject(xhr.statusText);\n//     xhr.send();\n//   })\n// }\n\n// getUrl(url)\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//---------------------------------------------------------------test9\n// axios \n// const url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n// const axios = {\n//   get: function(url) {\n//     return new Promise((resolve, reject) => {\n//       const xhr = new XMLHttpRequest();\n//       xhr.open('GET', url);\n//       xhr.onload = () => resolve(xhr.responseText);\n//       xhr.onerror = () => reject(xhr.statusText);\n//       xhr.send();\n//     })\n//   }\n// }\n\n// axios.get(url)\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n//----------------------------------------------------------------test10\n//sweetalert2  彈跳視窗，此套件的載入方式是在 layout.ejs 使用它的 cdn\n\n// Swal.fire({\n//   title: 'Are you sure?',\n//   text: \"You won't be able to revert this!\",\n//   icon: 'warning',\n//   showCancelButton: true,\n//   confirmButtonColor: '#3085d6',\n//   cancelButtonColor: '#d33',\n//   confirmButtonText: 'Yes, delete it!'\n// }).then((result) => {\n//   console.log(result);\n//   if (result.isConfirmed) {\n//     Swal.fire(\n//       {\n//         title: '新增成功',\n//         icon: 'success',\n//       }\n//     )\n//   }\n// })\n\n//------------------------------------------------------------------test11\n// sweetalert2 input Types\n// Swal.fire({\n//   icon: 'info',\n//   title: '請填寫文字內容',\n//   input: 'text'\n// }).then(result =>{\n//   console.log(result.value);\n//   Swal.fire({\n//     icon:'success', \n//     title:'新增內容成功',\n//     text: result.value,\n//   })\n// })\n  \n//-------------------------------------------------------------------test12\n// (async() =>{\n// const ipAPI = '//api.ipify.org?format=json';\n\n// const inputValue = fetch(ipAPI)\n//   .then(response => response.json())\n//   .then(data => data.ip)\n\n// const { value: ipAddress } = await Swal.fire({\n//   title: 'Enter your IP address',\n//   input: 'text',\n//   inputLabel: 'Your IP address',\n//   inputValue: inputValue,\n//   showCancelButton: true,\n//   inputValidator: (value) => {\n//     if (!value) {\n//       return 'You need to write something!'\n//     }\n//   }\n// })\n\n// if (ipAddress) {\n//   Swal.fire(`Your IP address is ${ipAddress}`)\n// }\n// })()\n\n//----------------------------------------------------------------------todolist\n//註冊\n// function signUp(email, nickname, pwd) {\n//   axios.post('https://todoo.5xcamp.us/users', {\n//     \"user\": {\n//       \"email\": email,\n//       \"nickname\": nickname,\n//       \"password\": pwd\n//     }\n//   })\n//   .then(res => console.log(res))\n//   .catch(error => console.log(error.response))\n// }\n\nfunction signUp(email, nickname, password){\n  axios.post('https://todoo.5xcamp.us/users',{\n    \"user\": {\n      \"email\": email,\n      \"nickname\": nickname,\n      \"password\": password\n    }\n  })\n    .then(res => console.log(res))\n    .catch(error => console.log(error))\n}"]}